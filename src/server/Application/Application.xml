<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Application</name>
    </assembly>
    <members>
        <member name="T:Application.Api.v1.Api.ApiEndpoints">
            <summary>
            Endpoints dealing with overall API integration functionality
            </summary>
        </member>
        <member name="M:Application.Api.v1.Api.ApiEndpoints.MapEndpointsApi(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.Api.ApiEndpoints.GetToken(Application.Requests.Api.ApiGetTokenRequest,Application.Services.Identity.IAppAccountService)">
            <summary>
            Gets a Json Web Token (JWT) for use in API calls
            </summary>
            <param name="tokenRequest">Credentials to authenticate</param>
            <param name="accountService"></param>
            <returns>JWT with an expiration datetime in GMT/UTC</returns>
            <remarks>
                - Expiration time returned is in GMT/UTC
            </remarks>
        </member>
        <member name="M:Application.Api.v1.Api.ApiEndpoints.WhoAmI(Application.Services.Identity.ICurrentUserService)">
            <summary>
            Return basic information about the currently authenticated account
            </summary>
            <param name="currentUserService"></param>
            <returns>Basic user information</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ConfigItemEndpoints.MapEndpointsConfigItem(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.GameServer.ConfigItemEndpoints.GetAllPaginated(System.Int32,System.Int32,Application.Services.GameServer.IGameServerService,Microsoft.Extensions.Options.IOptions{Application.Settings.AppSettings.AppConfiguration})">
            <summary>
            Get all configuration items with pagination
            </summary>
            <param name="pageNumber">Page number to get</param>
            <param name="pageSize">Number of items per page</param>
            <param name="gameServerService"></param>
            <param name="appConfig"></param>
            <returns>List of configuration items</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ConfigItemEndpoints.GetCount(Application.Services.GameServer.IGameServerService)">
            <summary>
            Get total configuration items count
            </summary>
            <param name="gameServerService"></param>
            <returns>Count of configuration items</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ConfigItemEndpoints.GetById(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get a configuration item by id
            </summary>
            <param name="id">Configuration item id</param>
            <param name="gameServerService"></param>
            <returns>Configuration item object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ConfigItemEndpoints.GetByLocalResourceId(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get configuration times by game profile id
            </summary>
            <param name="id">Game profile id</param>
            <param name="gameServerService"></param>
            <returns>List of configuration items</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ConfigItemEndpoints.Create(Application.Models.GameServer.ConfigurationItem.ConfigurationItemCreate,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Create a configuration item
            </summary>
            <param name="createObject">Required properties to create a configuration item</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Id of the created configuration item</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ConfigItemEndpoints.Update(Application.Models.GameServer.ConfigurationItem.ConfigurationItemUpdate,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Update a configuration items properties
            </summary>
            <param name="updateObject">Required properties to update a configuration item</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ConfigItemEndpoints.Delete(System.Guid,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Delete a configuration item
            </summary>
            <param name="id">Configuration item id</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ConfigItemEndpoints.Search(System.String,Application.Services.GameServer.IGameServerService)">
            <summary>
            Search for configuration items by properties
            </summary>
            <param name="searchText">Text to search for</param>
            <param name="gameServerService"></param>
            <returns>List of matching configuration items</returns>
            <remarks>Searches by: ID, GameProfileId, Path, Category, Key, Value</remarks>
        </member>
        <member name="M:Application.Api.v1.GameServer.DeveloperEndpoints.MapEndpointsDeveloper(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.GameServer.DeveloperEndpoints.GetAllPaginated(System.Int32,System.Int32,Application.Services.GameServer.IGameService,Microsoft.Extensions.Options.IOptions{Application.Settings.AppSettings.AppConfiguration})">
            <summary>
            Get all developers with pagination
            </summary>
            <param name="pageNumber">Page number to get</param>
            <param name="pageSize">Number of items per page</param>
            <param name="gameService"></param>
            <param name="appConfig"></param>
            <returns>List of developers</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.DeveloperEndpoints.GetCount(Application.Services.GameServer.IGameService)">
            <summary>
            Get count of total developers
            </summary>
            <param name="gameService"></param>
            <returns>Count of total developers</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.DeveloperEndpoints.GetById(System.Guid,Application.Services.GameServer.IGameService)">
            <summary>
            Get a developers by id
            </summary>
            <param name="id">Developer id</param>
            <param name="gameService"></param>
            <returns>Developer object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.DeveloperEndpoints.GetByName(System.String,Application.Services.GameServer.IGameService)">
            <summary>
            Get a developer by name
            </summary>
            <param name="name">Developer name</param>
            <param name="gameService"></param>
            <returns>Developer object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.DeveloperEndpoints.GetByGameId(System.Guid,Application.Services.GameServer.IGameService)">
            <summary>
            Get developers by game id
            </summary>
            <param name="id">Game id</param>
            <param name="gameService"></param>
            <returns>List of developers</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.DeveloperEndpoints.Create(Application.Models.GameServer.Developers.DeveloperCreate,Application.Services.GameServer.IGameService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Create a developer
            </summary>
            <param name="createObject">Required properties to create a developer</param>
            <param name="gameService"></param>
            <param name="currentUserService"></param>
            <returns>Id of the created developer</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.DeveloperEndpoints.Delete(System.Guid,Application.Services.GameServer.IGameService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Delete a developer
            </summary>
            <param name="id">Developer id</param>
            <param name="gameService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.DeveloperEndpoints.Search(System.String,Application.Services.GameServer.IGameService)">
            <summary>
            Search developers by properties
            </summary>
            <param name="searchText">Text to search for</param>
            <param name="gameService"></param>
            <returns>List of developers</returns>
            <remarks>Searches by: ID, Name</remarks>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameEndpoints.MapEndpointsGame(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameEndpoints.GetAllPaginated(System.Int32,System.Int32,Application.Services.GameServer.IGameService,Microsoft.Extensions.Options.IOptions{Application.Settings.AppSettings.AppConfiguration})">
            <summary>
            Get all games with pagination
            </summary>
            <param name="pageNumber">Page number to get</param>
            <param name="pageSize">Number of items per page</param>
            <param name="gameService"></param>
            <param name="appConfig"></param>
            <returns>List of games</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameEndpoints.GetCount(Application.Services.GameServer.IGameService)">
            <summary>
            Get total game count
            </summary>
            <param name="gameService"></param>
            <returns>Count of total games</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameEndpoints.GetById(System.Guid,Application.Services.GameServer.IGameService)">
            <summary>
            Get a game by id
            </summary>
            <param name="id">Game Id</param>
            <param name="gameService"></param>
            <returns>Game object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameEndpoints.GetBySteamName(System.String,Application.Services.GameServer.IGameService)">
            <summary>
            Get a game by steam name
            </summary>
            <param name="steamName">Game steam name</param>
            <param name="gameService"></param>
            <returns>Game object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameEndpoints.GetByFriendlyName(System.String,Application.Services.GameServer.IGameService)">
            <summary>
            Get a game by friendly name
            </summary>
            <param name="friendlyName">Game friendly name</param>
            <param name="gameService"></param>
            <returns>Game object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameEndpoints.GetBySteamGameId(System.Int32,Application.Services.GameServer.IGameService)">
            <summary>
            Get a game by steam id
            </summary>
            <param name="id">Game steam id</param>
            <param name="gameService"></param>
            <returns>Game object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameEndpoints.GetBySteamToolId(System.Int32,Application.Services.GameServer.IGameService)">
            <summary>
            Get a game by steam tool id
            </summary>
            <param name="id">Game steam tool id</param>
            <param name="gameService"></param>
            <returns>Game object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameEndpoints.Create(Application.Requests.GameServer.Game.GameCreateRequest,Application.Services.GameServer.IGameService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Create a game
            </summary>
            <param name="request">Required properties to create a game</param>
            <param name="gameService"></param>
            <param name="currentUserService"></param>
            <returns>Id of the created game</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameEndpoints.Update(Application.Requests.GameServer.Game.GameUpdateRequest,Application.Services.GameServer.IGameService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Update a game's properties
            </summary>
            <param name="request"></param>
            <param name="gameService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameEndpoints.Delete(System.Guid,Application.Services.GameServer.IGameService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Delete a game
            </summary>
            <param name="id">Game id</param>
            <param name="gameService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameEndpoints.Search(System.String,Application.Services.GameServer.IGameService)">
            <summary>
            Search a game by it's properties
            </summary>
            <param name="searchText">Text to search with</param>
            <param name="gameService"></param>
            <returns>List of games</returns>
            <remarks>Searches by: ID, FriendlyName, SteamName, SteamGameId, SteamToolId, Description</remarks>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameGenreEndpoints.MapEndpointsGameGenre(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameGenreEndpoints.GetAllPaginated(System.Int32,System.Int32,Application.Services.GameServer.IGameService,Microsoft.Extensions.Options.IOptions{Application.Settings.AppSettings.AppConfiguration})">
            <summary>
            Get all game genres with pagination
            </summary>
            <param name="pageNumber">Page number to get</param>
            <param name="pageSize">Number of items per page</param>
            <param name="gameService"></param>
            <param name="appConfig"></param>
            <returns>List of game genres</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameGenreEndpoints.GetCount(Application.Services.GameServer.IGameService)">
            <summary>
            Get total count of game genres
            </summary>
            <param name="gameService"></param>
            <returns>Count of total game genres</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameGenreEndpoints.GetById(System.Guid,Application.Services.GameServer.IGameService)">
            <summary>
            Get a game genre by id
            </summary>
            <param name="id">Game genre id</param>
            <param name="gameService"></param>
            <returns>Game genre object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameGenreEndpoints.GetByName(System.String,Application.Services.GameServer.IGameService)">
            <summary>
            Get a game genre by name
            </summary>
            <param name="name">Game genre name</param>
            <param name="gameService"></param>
            <returns>Game genre object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameGenreEndpoints.GetByGameId(System.Guid,Application.Services.GameServer.IGameService)">
            <summary>
            Get game genres by game id
            </summary>
            <param name="id">Game id</param>
            <param name="gameService"></param>
            <returns>List of game genres</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameGenreEndpoints.Create(Application.Models.GameServer.GameGenre.GameGenreCreate,Application.Services.GameServer.IGameService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Create a game genre
            </summary>
            <param name="createObject">Requires properties to create a game genre</param>
            <param name="gameService"></param>
            <param name="currentUserService"></param>
            <returns>Id of the created game genre</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameGenreEndpoints.Delete(System.Guid,Application.Services.GameServer.IGameService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Delete a game genre
            </summary>
            <param name="id">Game genre id</param>
            <param name="gameService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameGenreEndpoints.Search(System.String,Application.Services.GameServer.IGameService)">
            <summary>
            Search game genres by properties
            </summary>
            <param name="searchText">Text to search for</param>
            <param name="gameService"></param>
            <returns>List of game genres</returns>
            <remarks>Searches by: ID, Name, Description</remarks>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameProfileEndpoints.MapEndpointsGameProfile(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameProfileEndpoints.GetAllPaginated(System.Int32,System.Int32,Application.Services.GameServer.IGameServerService,Microsoft.Extensions.Options.IOptions{Application.Settings.AppSettings.AppConfiguration})">
            <summary>
            Get all game profiles with pagination
            </summary>
            <param name="pageNumber">Page number to get</param>
            <param name="pageSize">Number of items per page</param>
            <param name="gameServerService"></param>
            <param name="appConfig"></param>
            <returns>List of game profiles</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameProfileEndpoints.GetCount(Application.Services.GameServer.IGameServerService)">
            <summary>
            Get total game profile count
            </summary>
            <param name="gameServerService"></param>
            <returns>Count of total game profiles</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameProfileEndpoints.GetById(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get a game profile by id
            </summary>
            <param name="id">Game profile Id</param>
            <param name="gameServerService"></param>
            <returns>Game profile object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameProfileEndpoints.GetByFriendlyName(System.String,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get a game profile by friendly name
            </summary>
            <param name="friendlyName">Game profile friendly name</param>
            <param name="gameServerService"></param>
            <returns>Game profile object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameProfileEndpoints.GetByGameId(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get list of game profiles by game id
            </summary>
            <param name="id">Game id</param>
            <param name="gameServerService"></param>
            <returns>List of game profiles</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameProfileEndpoints.GetByOwnerId(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get game profiles by owner id
            </summary>
            <param name="id">Owner account id</param>
            <param name="gameServerService"></param>
            <returns>List of game profiles</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameProfileEndpoints.Create(Application.Requests.GameServer.GameProfile.GameProfileCreateRequest,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Create a game profile
            </summary>
            <param name="request">Required properties to create a game profile</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Id of the created game profile</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameProfileEndpoints.Update(Application.Requests.GameServer.GameProfile.GameProfileUpdateRequest,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Update a game profiles properties
            </summary>
            <param name="request">Required properties to update a game profile</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameProfileEndpoints.Delete(System.Guid,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Delete a game profile
            </summary>
            <param name="id">Game profile id</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameProfileEndpoints.Search(System.String,Application.Services.GameServer.IGameServerService)">
            <summary>
            Search game profiles by properties
            </summary>
            <param name="searchText">Text to search for</param>
            <param name="gameServerService"></param>
            <returns>List of matching game profiles</returns>
            <remarks>Searches by: ID, FriendlyName, OwnerId, GameId, ServerProcessName</remarks>
        </member>
        <member name="T:Application.Api.v1.GameServer.GameServerEndpoints">
            <summary>
            Endpoints dealing with game server operations
            </summary>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.MapEndpointsGameserver(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.GetAllPaginated(System.Int32,System.Int32,Application.Services.GameServer.IGameServerService,Microsoft.Extensions.Options.IOptions{Application.Settings.AppSettings.AppConfiguration})">
            <summary>
            Get all game servers with pagination
            </summary>
            <param name="pageNumber">Page number to get</param>
            <param name="pageSize">Number of items per page</param>
            <param name="gameServerService"></param>
            <param name="appConfig"></param>
            <returns>List of game servers</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.GetCount(Application.Services.GameServer.IGameServerService)">
            <summary>
            Get the total game server count
            </summary>
            <param name="gameServerService"></param>
            <returns>Count of total game servers</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.GetById(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get a game server by id
            </summary>
            <param name="id">Id of the game server</param>
            <param name="gameServerService"></param>
            <returns>Game server object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.GetByServerName(System.String,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get a game server by name
            </summary>
            <param name="serverName">Game server name</param>
            <param name="gameServerService"></param>
            <returns>Game server object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.GetByGameId(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get game servers by game id
            </summary>
            <param name="id">Id of a game</param>
            <param name="gameServerService"></param>
            <returns>List of game servers</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.GetByGameProfileId(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get game servers by game profile id
            </summary>
            <param name="id">Game profile id</param>
            <param name="gameServerService"></param>
            <returns>List of game servers</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.GetByHostId(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get game servers by host id
            </summary>
            <param name="id">Host id</param>
            <param name="gameServerService"></param>
            <returns>List of game servers</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.GetByOwnerId(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get game servers by the owner id
            </summary>
            <param name="id">Id of the owner</param>
            <param name="gameServerService"></param>
            <returns>List of game servers</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.Create(Application.Requests.GameServer.GameServer.GameServerCreateRequest,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Create a game server
            </summary>
            <param name="request">Required properties to create a game server</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Id of the created game server</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.Update(Application.Requests.GameServer.GameServer.GameServerUpdateRequest,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Update a game server's properties
            </summary>
            <param name="request">Required properties to update a game server</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.Delete(System.Guid,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Delete a game server
            </summary>
            <param name="id">Id of the game server</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.Search(System.String,Application.Services.GameServer.IGameServerService)">
            <summary>
            Search for game servers
            </summary>
            <param name="searchText">Text to search</param>
            <param name="gameServerService"></param>
            <returns>List of matching game servers</returns>
            <remarks>Searches by: ID, OwnerId, HostId, GameId, GameProfileId, PublicIp, PrivateIp, ExternalHostname, ServerName</remarks>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.StartServer(System.Guid,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Start a game server
            </summary>
            <param name="id">Gameserver Id</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.StopServer(System.Guid,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Stop a game server
            </summary>
            <param name="id">Gameserver Id</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.RestartServer(System.Guid,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Restart a game server
            </summary>
            <param name="id">Gameserver Id</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.UpdateLocalResource(System.Guid,System.Guid,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Update the local resource for the game server on the host
            </summary>
            <param name="serverId">Game server id</param>
            <param name="resourceId">Local resource id</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns></returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.GameServerEndpoints.UpdateAllLocalResources(System.Guid,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Update all local resources for the game server on the host
            </summary>
            <param name="serverId">Game server id</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns></returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostCheckinEndpoints.MapEndpointsHostCheckin(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostCheckinEndpoints.Checkin(Application.Requests.GameServer.Host.HostCheckInRequest,Application.Services.GameServer.IHostService,Application.Services.Identity.ICurrentUserService,Application.Services.System.IDateTimeService,Application.Services.System.ISerializerService)">
            <summary>
            Inject a valid host check-in status
            </summary>
            <param name="request">Host check-in details</param>
            <param name="hostService"></param>
            <param name="currentUserService"></param>
            <param name="dateTimeService"></param>
            <param name="serializerService"></param>
            <returns>Success or Failure, payload is a serialized list of work for the host to process</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostCheckinEndpoints.GetAllPaginated(System.Int32,System.Int32,Application.Services.GameServer.IHostService,Microsoft.Extensions.Options.IOptions{Application.Settings.AppSettings.AppConfiguration})">
            <summary>
            Get all checkins with pagination
            </summary>
            <param name="pageNumber">Page number to get</param>
            <param name="pageSize">Number of items per page</param>
            <param name="hostService"></param>
            <param name="appConfig"></param>
            <returns>List of host checkins</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostCheckinEndpoints.GetCount(Application.Services.GameServer.IHostService)">
            <summary>
            Get total count of host checkins
            </summary>
            <param name="hostService"></param>
            <returns>Count of host checkins</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostCheckinEndpoints.GetById(System.Int32,Application.Services.GameServer.IHostService)">
            <summary>
            Get a host checkin by id
            </summary>
            <param name="id">Id of the checkin</param>
            <param name="hostService"></param>
            <returns>Host checkin</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostCheckinEndpoints.GetByHostId(System.Guid,Application.Services.GameServer.IHostService)">
            <summary>
            Get a host checkins by the host ID
            </summary>
            <param name="id">Id of the host</param>
            <param name="hostService"></param>
            <returns>List of checkins for the host</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostCheckinEndpoints.DeleteOld(System.Int32,Application.Services.GameServer.IHostService,Application.Services.Identity.ICurrentUserService,Application.Services.System.IDateTimeService)">
            <summary>
            Delete host checkins older than the provided timeframe
            </summary>
            <param name="olderThanDays">Number of days to remove checkins after</param>
            <param name="hostService"></param>
            <param name="currentUserService"></param>
            <param name="dateTime"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostCheckinEndpoints.Search(System.String,Application.Services.GameServer.IHostService)">
            <summary>
            Search for checkins by properties
            </summary>
            <param name="searchText">Text to search by</param>
            <param name="hostService"></param>
            <returns>List of matching host checkins</returns>
            <remarks>Searches by: ID, HostId</remarks>
        </member>
        <member name="T:Application.Api.v1.GameServer.HostEndpoints">
            <summary>
            Endpoints dealing with game server host operations
            </summary>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostEndpoints.MapEndpointsHost(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostEndpoints.GetToken(Application.Requests.GameServer.Host.HostAuthRequest,Application.Services.GameServer.IHostService)">
            <summary>
            Generate a valid authorization token for use in host API endpoints
            </summary>
            <param name="request">Valid and active Host ID and Host Key</param>
            <param name="hostService"></param>
            <returns>JWT with an expiration datetime in GMT/UTC</returns>
            <remarks>
            - Expiration time returned is in GMT/UTC
            </remarks>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostEndpoints.GetAllPaginated(System.Int32,System.Int32,Application.Services.GameServer.IHostService,Microsoft.Extensions.Options.IOptions{Application.Settings.AppSettings.AppConfiguration})">
            <summary>
            Get all game server hosts with pagination
            </summary>
            <param name="pageNumber">Page number to get</param>
            <param name="pageSize">Number of items per page</param>
            <param name="hostService"></param>
            <param name="appConfig"></param>
            <returns>List of game server hosts</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostEndpoints.GetById(System.Guid,Application.Services.GameServer.IHostService)">
            <summary>
            Get a host by it's id
            </summary>
            <param name="id">Id of the host to retrieve</param>
            <param name="hostService"></param>
            <returns>Host object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostEndpoints.GetByHostname(System.String,Application.Services.GameServer.IHostService)">
            <summary>
            Get a host by it's hostname
            </summary>
            <param name="hostname"></param>
            <param name="hostService"></param>
            <returns>Host object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostEndpoints.Create(Application.Requests.GameServer.Host.HostCreateRequest,Application.Services.GameServer.IHostService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Create a host
            </summary>
            <param name="request">Required properties request to create a host</param>
            <param name="hostService"></param>
            <param name="currentUserService"></param>
            <returns>ID of the host that was created</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostEndpoints.Update(Application.Requests.GameServer.Host.HostUpdateRequest,Application.Services.GameServer.IHostService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Update the properties of a host
            </summary>
            <param name="request">Required properties to update a host</param>
            <param name="hostService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with any context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostEndpoints.Delete(System.Guid,Application.Services.GameServer.IHostService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Delete a host by it's id
            </summary>
            <param name="id">Id of the host to delete</param>
            <param name="hostService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostEndpoints.Search(System.String,Application.Services.GameServer.IHostService)">
            <summary>
            Search for a host by properties
            </summary>
            <param name="searchText">Text to search by</param>
            <param name="hostService"></param>
            <returns>List of hosts matching the search criteria</returns>
            <remarks>Search matches against ID, FriendlyName, Description, PrivateIp and PublicIp</remarks>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostRegistrationEndpoints.MapEndpointsHostRegistration(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostRegistrationEndpoints.Create(Application.Requests.GameServer.Host.HostRegistrationCreateRequest,Application.Services.GameServer.IHostService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Generates a new registration token to register a new host, the host must then use the registration URI to complete registration
            </summary>
            <param name="request">Required properties to generate a host registration</param>
            <param name="hostService"></param>
            <param name="currentUserService"></param>
            <returns>Host ID, Key and full registration confirmation URI for the new host to complete registration</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostRegistrationEndpoints.Confirm(Application.Requests.GameServer.Host.HostRegistrationConfirmRequest,Application.Services.GameServer.IHostService,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Confirms and completes an active registration
            </summary>
            <param name="request">Host ID and Key of a valid and active registration</param>
            <param name="hostService"></param>
            <param name="context"></param>
            <returns>Host ID and Host Token for use when authenticating the host</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostRegistrationEndpoints.GetAllPaginated(System.Int32,System.Int32,Application.Services.GameServer.IHostService,Microsoft.Extensions.Options.IOptions{Application.Settings.AppSettings.AppConfiguration})">
            <summary>
            Get all registrations with pagination
            </summary>
            <param name="pageNumber">Page number to get</param>
            <param name="pageSize">Number of items per page</param>
            <param name="hostService"></param>
            <param name="appConfig"></param>
            <returns>List of host registrations</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostRegistrationEndpoints.GetAllActive(Application.Services.GameServer.IHostService)">
            <summary>
            Get active host registrations
            </summary>
            <param name="hostService"></param>
            <returns>List of host registrations</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostRegistrationEndpoints.GetAllInActive(Application.Services.GameServer.IHostService)">
            <summary>
            Get inactive host registrations
            </summary>
            <param name="hostService"></param>
            <returns>List of host registrations</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostRegistrationEndpoints.GetCount(Application.Services.GameServer.IHostService)">
            <summary>
            Get the count of all host registrations
            </summary>
            <param name="hostService"></param>
            <returns>Count of host registrations</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostRegistrationEndpoints.Update(Application.Requests.GameServer.Host.HostRegistrationUpdateRequest,Application.Services.GameServer.IHostService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Update a host registration's properties
            </summary>
            <param name="request">Required properties to update a host registration</param>
            <param name="hostService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.HostRegistrationEndpoints.Search(System.String,Application.Services.GameServer.IHostService)">
            <summary>
            Search for registrations by properties
            </summary>
            <param name="searchText">Text to search by</param>
            <param name="hostService"></param>
            <returns>List of matching registrations</returns>
            <remarks>Searches by ID, HostId, Key, Description and Public Ip</remarks>
        </member>
        <member name="M:Application.Api.v1.GameServer.LocalResourceEndpoints.MapEndpointsLocalResource(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.GameServer.LocalResourceEndpoints.GetAllPaginated(System.Int32,System.Int32,Application.Services.GameServer.IGameServerService,Microsoft.Extensions.Options.IOptions{Application.Settings.AppSettings.AppConfiguration})">
            <summary>
            Get all local resources with pagination
            </summary>
            <param name="pageNumber">Page number to get</param>
            <param name="pageSize">Number of items per page</param>
            <param name="gameServerService"></param>
            <param name="appConfig"></param>
            <returns>List of local resources</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.LocalResourceEndpoints.GetCount(Application.Services.GameServer.IGameServerService)">
            <summary>
            Get total local resources count
            </summary>
            <param name="gameServerService"></param>
            <returns>Count of total resources</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.LocalResourceEndpoints.GetById(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get a local resource by id
            </summary>
            <param name="id">Local resource id</param>
            <param name="gameServerService"></param>
            <returns>Local resource object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.LocalResourceEndpoints.GetByGameProfileId(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get local resources by game profile id
            </summary>
            <param name="id">Game profile id</param>
            <param name="gameServerService"></param>
            <returns>List of local resources</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.LocalResourceEndpoints.GetForGameServerId(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get local resources by game server id
            </summary>
            <param name="id">Game server id</param>
            <param name="gameServerService"></param>
            <returns>List of local resources</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.LocalResourceEndpoints.Create(Application.Requests.GameServer.LocalResource.LocalResourceCreateRequest,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Create a local resource
            </summary>
            <param name="request"></param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Id of the created local resource</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.LocalResourceEndpoints.Update(Application.Requests.GameServer.LocalResource.LocalResourceUpdateRequest,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Update a local resources properties
            </summary>
            <param name="request">Required properties to update a local resource</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.LocalResourceEndpoints.Delete(System.Guid,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Delete a local resource
            </summary>
            <param name="id">Local resource id</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.LocalResourceEndpoints.Search(System.String,Application.Services.GameServer.IGameServerService)">
            <summary>
            Search local resources by properties
            </summary>
            <param name="searchText">Text to search for</param>
            <param name="gameServerService"></param>
            <returns>List of matching local resources</returns>
            <remarks>Searches by: ID, GameProfileId, GameServerId, Name, Path, Extension, Args</remarks>
        </member>
        <member name="M:Application.Api.v1.GameServer.ModEndpoints.MapEndpointsMod(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.GameServer.ModEndpoints.GetAllPaginated(System.Int32,System.Int32,Application.Services.GameServer.IGameServerService,Microsoft.Extensions.Options.IOptions{Application.Settings.AppSettings.AppConfiguration})">
            <summary>
            Get all mods with pagination
            </summary>
            <param name="pageNumber">Page number to get</param>
            <param name="pageSize">Number of items per page</param>
            <param name="gameServerService"></param>
            <param name="appConfig"></param>
            <returns>List of mods</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ModEndpoints.GetCount(Application.Services.GameServer.IGameServerService)">
            <summary>
            Get total mod count
            </summary>
            <param name="gameServerService"></param>
            <returns>Count of total mods</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ModEndpoints.GetById(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get a mod by id
            </summary>
            <param name="id">Mod id</param>
            <param name="gameServerService"></param>
            <returns>Mod object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ModEndpoints.GetByHash(System.String,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get a mod by it's integrity hash
            </summary>
            <param name="hash">Mod hash</param>
            <param name="gameServerService"></param>
            <returns>Mod object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ModEndpoints.GetByFriendlyName(System.String,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get mods by their friendly name
            </summary>
            <param name="friendlyName">Mod friendly name</param>
            <param name="gameServerService"></param>
            <returns>List of mods</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ModEndpoints.GetByGameId(System.Guid,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get mods by game id
            </summary>
            <param name="id">Game id</param>
            <param name="gameServerService"></param>
            <returns>List of mods</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ModEndpoints.GetBySteamGameId(System.Int32,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get mods by steam game id
            </summary>
            <param name="id">Steam Game Id</param>
            <param name="gameServerService"></param>
            <returns>List of mods</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ModEndpoints.GetBySteamId(System.String,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get mod by steam id
            </summary>
            <param name="id">Mod steam id</param>
            <param name="gameServerService"></param>
            <returns>Mod object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ModEndpoints.GetBySteamToolId(System.Int32,Application.Services.GameServer.IGameServerService)">
            <summary>
            Get mods by steam tool id
            </summary>
            <param name="id">Steam tool id</param>
            <param name="gameServerService"></param>
            <returns>List of mods</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ModEndpoints.Create(Application.Models.GameServer.Mod.ModCreate,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Create a mod
            </summary>
            <param name="request">Required properties to create a mod</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Id of the created mod</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ModEndpoints.Update(Application.Models.GameServer.Mod.ModUpdate,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Update a mod's properties
            </summary>
            <param name="updateObject">Required properties to update a mod</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ModEndpoints.Delete(System.Guid,Application.Services.GameServer.IGameServerService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Delete a mod
            </summary>
            <param name="id">Mod id</param>
            <param name="gameServerService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.ModEndpoints.Search(System.String,Application.Services.GameServer.IGameServerService)">
            <summary>
            Search mods by properties
            </summary>
            <param name="searchText">Text to search</param>
            <param name="gameServerService"></param>
            <returns>List of matching mods</returns>
            <remarks>Searches by: ID, GameId, SteamGameId, SteamToolId, SteamId, FriendlyName</remarks>
        </member>
        <member name="T:Application.Api.v1.GameServer.NetworkEndpoints">
            <summary>
            Endpoints dealing with network operations
            </summary>
        </member>
        <member name="M:Application.Api.v1.GameServer.NetworkEndpoints.MapEndpointsNetwork(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.GameServer.NetworkEndpoints.GameserverConnectable(Application.Models.GameServer.Network.GameServerConnectivityCheck,Application.Services.GameServer.INetworkService)">
            <summary>
            Get whether a game server is connectable
            </summary>
            <param name="check">Required parameters to check for game server connectivity</param>
            <param name="networkService"></param>
            <returns>Boolean indicating a game server is connectable</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.NetworkEndpoints.IsPortOpen(System.String,System.Int32,Domain.Enums.GameServer.NetworkProtocol,System.Int32,Application.Services.GameServer.INetworkService)">
            <summary>
            Get whether a port is open or gives a valid response
            </summary>
            <param name="ipAddress">Ip or hostname to send a check to</param>
            <param name="port">Port to send a check to</param>
            <param name="protocol">0=TCP, 1=UDP</param>
            <param name="timeoutMilliseconds">Timeout in milliseconds</param>
            <param name="networkService"></param>
            <returns>Boolean indicating the port is open / responds</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.PublisherEndpoints.MapEndpointsPublisher(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.GameServer.PublisherEndpoints.GetAllPaginated(System.Int32,System.Int32,Application.Services.GameServer.IGameService,Microsoft.Extensions.Options.IOptions{Application.Settings.AppSettings.AppConfiguration})">
            <summary>
            Get all publishers with pagination
            </summary>
            <param name="pageNumber">Page number to get</param>
            <param name="pageSize">Number of items per page</param>
            <param name="gameService"></param>
            <param name="appConfig"></param>
            <returns>List of publishers</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.PublisherEndpoints.GetCount(Application.Services.GameServer.IGameService)">
            <summary>
            Get total count of publishers
            </summary>
            <param name="gameService"></param>
            <returns>Count of total publishers</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.PublisherEndpoints.GetById(System.Guid,Application.Services.GameServer.IGameService)">
            <summary>
            Get a publisher by id
            </summary>
            <param name="id">Publisher id</param>
            <param name="gameService"></param>
            <returns>Publisher object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.PublisherEndpoints.GetByName(System.String,Application.Services.GameServer.IGameService)">
            <summary>
            Get a publisher by name
            </summary>
            <param name="name">Publisher name</param>
            <param name="gameService"></param>
            <returns>Publisher object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.PublisherEndpoints.GetByGameId(System.Guid,Application.Services.GameServer.IGameService)">
            <summary>
            Get publishers by game id
            </summary>
            <param name="id">Game id</param>
            <param name="gameService"></param>
            <returns>List of publishers</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.PublisherEndpoints.Create(Application.Models.GameServer.Publishers.PublisherCreate,Application.Services.GameServer.IGameService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Create a publisher
            </summary>
            <param name="createObject">Required properties to create a publisher</param>
            <param name="gameService"></param>
            <param name="currentUserService"></param>
            <returns>Id of the created publisher</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.PublisherEndpoints.Delete(System.Guid,Application.Services.GameServer.IGameService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Delete a publisher
            </summary>
            <param name="id">Publisher id</param>
            <param name="gameService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.PublisherEndpoints.Search(System.String,Application.Services.GameServer.IGameService)">
            <summary>
            Search for publishers by properties
            </summary>
            <param name="searchText">Text to search for</param>
            <param name="gameService"></param>
            <returns>List of publishers</returns>
            <remarks>Searches by: ID, Name</remarks>
        </member>
        <member name="M:Application.Api.v1.GameServer.WeaverWorkEndpoints.MapEndpointsWeaverWork(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Registers the API endpoints
            </summary>
            <param name="app">Running application</param>
        </member>
        <member name="M:Application.Api.v1.GameServer.WeaverWorkEndpoints.GetAllPaginated(System.Int32,System.Int32,Application.Services.GameServer.IHostService,Microsoft.Extensions.Options.IOptions{Application.Settings.AppSettings.AppConfiguration})">
            <summary>
            Get all weaver work with pagination
            </summary>
            <param name="pageNumber">Page number to get</param>
            <param name="pageSize">Number of items per page</param>
            <param name="hostService"></param>
            <param name="appConfig"></param>
            <returns>List of weaver work</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.WeaverWorkEndpoints.GetCount(Application.Services.GameServer.IHostService)">
            <summary>
            Get count of total weaver work
            </summary>
            <param name="hostService"></param>
            <returns>Weaver work count</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.WeaverWorkEndpoints.GetById(System.Int32,Application.Services.GameServer.IHostService)">
            <summary>
            Get a unit of weaver work by id
            </summary>
            <param name="id">Id of the weaver work</param>
            <param name="hostService"></param>
            <returns>Weaver work object</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.WeaverWorkEndpoints.GetByStatus(Domain.Enums.GameServer.WeaverWorkState,Application.Services.GameServer.IHostService)">
            <summary>
            Get weaver work by status
            </summary>
            <param name="status">0=Waiting, 1=PickedUp, 2=InProgress, 3=Completed, 4=Cancelled, 5=Failed</param>
            <param name="hostService"></param>
            <returns>List of weaver work matching the status</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.WeaverWorkEndpoints.GetByType(Domain.Enums.GameServer.WeaverWorkTarget,Application.Services.GameServer.IHostService)">
            <summary>
            Get weaver work by target type
            </summary>
            <param name="target">001=StatusUpdate, 100=Host, 101=HostStatusUpdate, 102=HostDetail, 200=GameServer, 201=GameServerInstall, 202=GameServerUpdate,
            203=GameServerUninstall, 204=GameServerStateUpdate</param>
            <param name="hostService"></param>
            <returns>List of weaver work matching the target type</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.WeaverWorkEndpoints.GetWaitingForHost(System.Guid,Application.Services.GameServer.IHostService)">
            <summary>
            Gets the 10 oldest waiting Weaver work jobs for a given host id
            </summary>
            <param name="id">Id of the host to get weaver work for</param>
            <param name="hostService"></param>
            <returns>Up to 10 of the latest weaver work jobs</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.WeaverWorkEndpoints.GetAllWaitingForHost(System.Guid,Application.Services.GameServer.IHostService)">
            <summary>
            Gets all of the currently waiting weaver work jobs for a given host id
            </summary>
            <param name="id">Id of the host to get weaver work for</param>
            <param name="hostService"></param>
            <returns>All the current waiting weaver work jobs</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.WeaverWorkEndpoints.Create(Application.Requests.GameServer.WeaverWork.WeaverWorkCreateRequest,Application.Services.GameServer.IHostService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Create weaver work for a host
            </summary>
            <param name="request">Required properties to create weaver work for a host</param>
            <param name="hostService"></param>
            <param name="currentUserService"></param>
            <returns>ID of the weaver work created</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.WeaverWorkEndpoints.Update(Application.Models.GameServer.WeaverWork.WeaverWorkUpdate,Application.Services.GameServer.IHostService)">
            <summary>
            Update weaver work properties
            </summary>
            <param name="request">Weaver work properties to update</param>
            <param name="hostService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.WeaverWorkEndpoints.WorkStatusUpdate(Application.Models.GameServer.WeaverWork.WeaverWorkUpdate,Application.Services.GameServer.IHostService,Application.Services.Identity.ICurrentUserService,Application.Services.System.IDateTimeService,Application.Services.System.ISerializerService,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Update the status of requested weaver work from the host
            </summary>
            <param name="request">Work status update from the host</param>
            <param name="hostService"></param>
            <param name="currentUserService"></param>
            <param name="dateTimeService"></param>
            <param name="serializerService"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.WeaverWorkEndpoints.Delete(System.Int32,Application.Services.GameServer.IHostService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Delete weaver work
            </summary>
            <param name="id">Id of a weaver work</param>
            <param name="hostService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.WeaverWorkEndpoints.DeleteOld(System.DateTime,Application.Services.GameServer.IHostService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Delete weaver work older than a timeframe
            </summary>
            <param name="olderThan">Serializable DateTime, anything older than this datetime will be deleted</param>
            <param name="hostService"></param>
            <param name="currentUserService"></param>
            <returns>Success or failure with context messages</returns>
        </member>
        <member name="M:Application.Api.v1.GameServer.WeaverWorkEndpoints.Search(System.String,Application.Services.GameServer.IHostService)">
            <summary>
            Search for weaver work by properties
            </summary>
            <param name="searchText">Text to search for</param>
            <param name="hostService"></param>
            <returns>List of matching weaver work</returns>
            <remarks>Search by: ID, HostId</remarks>
        </member>
        <member name="T:Application.Api.v1.Identity.PermissionEndpoints">
            <summary>
            API endpoints for application permissions
            </summary>
        </member>
        <member name="M:Application.Api.v1.Identity.PermissionEndpoints.MapEndpointsPermissions(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Register the API endpoints
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Application.Api.v1.Identity.PermissionEndpoints.GetAllPermissions(Application.Services.Identity.IAppPermissionService)">
            <summary>
            Get all application permissions for roles and users
            </summary>
            <param name="permissionService"></param>
            <returns>List of application permissions for both roles and users</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.PermissionEndpoints.GetPermission(System.Guid,Application.Services.Identity.IAppPermissionService)">
            <summary>
            Get a specific permission
            </summary>
            <param name="permissionId">GUID ID of the desired permission to retrieve</param>
            <param name="permissionService"></param>
            <returns>Permission object for a user or role</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.PermissionEndpoints.AddPermissionToRole(Application.Requests.Identity.Permission.PermissionCreateForRoleRequest,Application.Services.Identity.IAppPermissionService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Add the specified permission to the specified role
            </summary>
            <param name="permissionRequest">Detail used to map a permission to a role</param>
            <param name="permissionService"></param>
            <param name="currentUserService"></param>
            <returns>Guid ID of the permission added</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.PermissionEndpoints.AddPermissionToUser(Application.Requests.Identity.Permission.PermissionCreateForUserRequest,Application.Services.Identity.IAppPermissionService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Add the specified permission to the specified user
            </summary>
            <param name="permissionRequest">Detail used to map a permission to a user</param>
            <param name="permissionService"></param>
            <param name="currentUserService"></param>
            <returns>GUID ID of the permission added</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.PermissionEndpoints.DoesUserHavePermission(System.Guid,System.Guid,Application.Services.Identity.IAppPermissionService)">
            <summary>
            Get whether a user has a specific permission
            </summary>
            <param name="userId">GUID ID of the user</param>
            <param name="permissionId">GUID ID of the permission</param>
            <param name="permissionService"></param>
            <returns>Boolean indicating whether the specified user has the specified permission</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.PermissionEndpoints.DoesRoleHavePermission(System.Guid,System.Guid,Application.Services.Identity.IAppPermissionService)">
            <summary>
            Get whether a role has a specific permission
            </summary>
            <param name="roleId">GUID ID of the role</param>
            <param name="permissionId">GUID ID of the permission</param>
            <param name="permissionService"></param>
            <returns>Boolean indicating whether the specified role has the specified permission</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.PermissionEndpoints.RemovePermissionFromUser(Application.Requests.Identity.Permission.PermissionRemoveFromUserRequest,Application.Services.Identity.IAppPermissionService)">
            <summary>
            Remove the specified permission from the specified user
            </summary>
            <param name="permissionRequest">Detail used to remove a permission from a user</param>
            <param name="permissionService"></param>
            <returns></returns>
        </member>
        <member name="M:Application.Api.v1.Identity.PermissionEndpoints.RemovePermissionFromRole(Application.Requests.Identity.Permission.PermissionRemoveFromRoleRequest,Application.Services.Identity.IAppPermissionService)">
            <summary>
            Remove the specified permission from the specified role 
            </summary>
            <param name="permissionRequest">Detail used to remove a permission from a role</param>
            <param name="permissionService"></param>
            <returns></returns>
        </member>
        <member name="M:Application.Api.v1.Identity.PermissionEndpoints.GetDirectPermissionsForUser(System.Guid,Application.Services.Identity.IAppPermissionService)">
            <summary>
            Get only permissions assigned directly to the specified user
            </summary>
            <param name="userId">GUID ID of the user</param>
            <param name="permissionService"></param>
            <returns>List of directly assigned permissions to the specified user</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.PermissionEndpoints.GetAllPermissionsForUser(System.Guid,Application.Services.Identity.IAppPermissionService)">
            <summary>
            Get all permissions for a user, including those inherited from assigned roles
            </summary>
            <param name="userId">GUID ID of the user</param>
            <param name="permissionService"></param>
            <returns>List of all permissions for a user, including those inherited from roles</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.PermissionEndpoints.GetAllPermissionsForRole(System.Guid,Application.Services.Identity.IAppPermissionService)">
            <summary>
            Get all permissions assigned to the specified role
            </summary>
            <param name="roleId">GUID ID of the role</param>
            <param name="permissionService"></param>
            <returns>List of permissions assigned to the specified role</returns>
        </member>
        <member name="T:Application.Api.v1.Identity.RoleEndpoints">
            <summary>
            API endpoints for application roles
            </summary>
        </member>
        <member name="M:Application.Api.v1.Identity.RoleEndpoints.MapEndpointsRoles(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Register role API endpoints
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Application.Api.v1.Identity.RoleEndpoints.GetAllRoles(Application.Services.Identity.IAppRoleService)">
            <summary>
            Get all roles
            </summary>
            <param name="roleService"></param>
            <returns>List of all roles</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.RoleEndpoints.GetById(System.Guid,Application.Services.Identity.IAppRoleService)">
            <summary>
            Get the specified role
            </summary>
            <param name="roleId">GUID ID of the role</param>
            <param name="roleService"></param>
            <returns>Detail regarding the specified role</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.RoleEndpoints.CreateRole(Application.Requests.Identity.Role.CreateRoleRequest,Application.Services.Identity.IAppRoleService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Create a role
            </summary>
            <param name="roleRequest">Detail used to create a role</param>
            <param name="roleService"></param>
            <param name="currentUserService"></param>
            <returns>GUID ID of the newly created role</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.RoleEndpoints.UpdateRole(Application.Requests.Identity.Role.UpdateRoleRequest,Application.Services.Identity.IAppRoleService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Update a role's properties
            </summary>
            <param name="roleRequest">Detail used to update a role, any properties left empty will not be updated</param>
            <param name="roleService"></param>
            <param name="currentUserService"></param>
            <returns></returns>
        </member>
        <member name="M:Application.Api.v1.Identity.RoleEndpoints.DeleteRole(System.Guid,Application.Services.Identity.IAppRoleService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Delete the specified role
            </summary>
            <param name="roleId">GUID ID of the role</param>
            <param name="roleService"></param>
            <param name="currentUserService"></param>
            <returns></returns>
        </member>
        <member name="M:Application.Api.v1.Identity.RoleEndpoints.IsUserInRole(System.Guid,System.Guid,Application.Services.Identity.IAppRoleService)">
            <summary>
            Determine whether the specified user is in the specified role
            </summary>
            <param name="userId">GUID ID of the user</param>
            <param name="roleId">GUID ID of the role</param>
            <param name="roleService"></param>
            <returns>Boolean indicating whether the specified user is a member of the specified role</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.RoleEndpoints.AddUserToRole(System.Guid,System.Guid,Application.Services.Identity.IAppRoleService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Add the specified user to the specified role
            </summary>
            <param name="userId">GUID ID of the user</param>
            <param name="roleId">GUID ID of the role</param>
            <param name="roleService"></param>
            <param name="currentUserService"></param>
            <returns></returns>
        </member>
        <member name="M:Application.Api.v1.Identity.RoleEndpoints.RemoveUserFromRole(System.Guid,System.Guid,Application.Services.Identity.IAppRoleService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Remove the specified user from the specified role
            </summary>
            <param name="userId">GUID ID of the user</param>
            <param name="roleId">GUID ID of the user</param>
            <param name="roleService"></param>
            <param name="currentUserService"></param>
            <returns></returns>
        </member>
        <member name="M:Application.Api.v1.Identity.RoleEndpoints.GetRolesForUser(System.Guid,Application.Services.Identity.IAppRoleService)">
            <summary>
            Get all roles for the specified user
            </summary>
            <param name="userId">GUID ID of the user</param>
            <param name="roleService"></param>
            <returns>List of roles assigned to the specified user</returns>
        </member>
        <member name="T:Application.Api.v1.Identity.UserEndpoints">
            <summary>
            API endpoints for application users
            </summary>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.MapEndpointsUsers(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Register user API endpoints
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.Register(Application.Requests.Identity.User.UserRegisterRequest,Application.Services.Identity.IAppAccountService)">
            <summary>
            Register a user account
            </summary>
            <param name="registerRequest">Details used to register a user account</param>
            <param name="accountService"></param>
            <returns></returns>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.GetAllUsers(Application.Services.Identity.IAppUserService)">
            <summary>
            Get all users
            </summary>
            <param name="userService"></param>
            <returns>List of all users</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.GetUserById(System.Guid,Application.Services.Identity.IAppUserService)">
            <summary>
            Get the specified user
            </summary>
            <param name="userId">GUID ID of the user</param>
            <param name="userService"></param>
            <returns>Detail regarding the specified user</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.GetFullUserById(System.Guid,Application.Services.Identity.IAppUserService)">
            <summary>
            Get full user detail for a user including permissions and extended attributes
            </summary>
            <param name="userId">GUID ID of the user</param>
            <param name="userService"></param>
            <returns>Detail for the specified user including permissions and extended attributes</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.GetUserByEmail(System.String,Application.Services.Identity.IAppUserService)">
            <summary>
            Get a user by email
            </summary>
            <param name="email">Email address of the user</param>
            <param name="userService"></param>
            <returns>Detail for the specified user</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.GetFullUserByEmail(System.String,Application.Services.Identity.IAppUserService)">
            <summary>
            Get full user detail for a user including permissions and extended attributes
            </summary>
            <param name="email">Email address for the user</param>
            <param name="userService"></param>
            <returns>Detail for the specified user including permissions and extended attributes</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.GetUserByUsername(System.String,Application.Services.Identity.IAppUserService)">
            <summary>
            Get a user by username
            </summary>
            <param name="username">Username of the user</param>
            <param name="userService"></param>
            <returns>Details of the specified user</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.GetFullUserByUsername(System.String,Application.Services.Identity.IAppUserService)">
            <summary>
            Get full user detail for a user including permissions and extended attributes
            </summary>
            <param name="username">Username of the user</param>
            <param name="userService"></param>
            <returns>Detail for the specified user including permissions and extended attributes</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.CreateUser(Application.Requests.Identity.User.UserCreateRequest,Application.Services.Identity.IAppUserService,Application.Services.Identity.IAppAccountService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Create a user account, bypassing registration
            </summary>
            <param name="userRequest">Details used to create the user</param>
            <param name="userService"></param>
            <param name="accountService"></param>
            <param name="currentUserService"></param>
            <returns>GUID ID of the newly created user account</returns>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.UpdateUser(Application.Requests.Identity.User.UserUpdateRequest,Application.Services.Identity.IAppUserService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Update properties of the specified user account
            </summary>
            <param name="userRequest">Details used to update a user account, any empty properties won't be updated</param>
            <param name="userService"></param>
            <param name="currentUserService"></param>
            <returns></returns>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.DeleteUser(System.Guid,Application.Services.Identity.IAppUserService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Delete the specified user account
            </summary>
            <param name="userId">GUID ID of the user</param>
            <param name="userService"></param>
            <param name="currentUserService"></param>
            <returns></returns>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.ResetPassword(System.Guid,Application.Services.Identity.IAppAccountService,Application.Services.Identity.ICurrentUserService)">
            <summary>
            Reset the password of the specified user account
            </summary>
            <param name="userId">GUID ID of the user</param>
            <param name="accountService"></param>
            <param name="currentUserService"></param>
            <returns></returns>
            <remarks>
            - User will be forced to re-authenticate after initiating a reset
            - Password reset email will be sent to the user's email address
            </remarks>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.EnableUser(System.Guid,Application.Services.Identity.IAppAccountService)">
            <summary>
            Enable the specified user account
            </summary>
            <param name="userId">GUID ID of the user</param>
            <param name="accountService"></param>
            <returns></returns>
            <remarks>
            - Can also be used to bypass a locked out account timeout
            </remarks>
        </member>
        <member name="M:Application.Api.v1.Identity.UserEndpoints.DisableUser(System.Guid,Application.Services.Identity.IAppAccountService)">
            <summary>
            Disable the specified user account
            </summary>
            <param name="userId">GUID ID of the user</param>
            <param name="accountService"></param>
            <returns></returns>
        </member>
        <member name="T:Application.Api.v1.Lifecycle.AuditEndpoints">
            <summary>
            API endpoints for application audit trails
            </summary>
        </member>
        <member name="M:Application.Api.v1.Lifecycle.AuditEndpoints.MapEndpointsAudit(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Register API endpoints for audit
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Application.Api.v1.Lifecycle.AuditEndpoints.GetAllTrails(Application.Services.Lifecycle.IAuditTrailService)">
            <summary>
            Get all audit trails
            </summary>
            <param name="auditService"></param>
            <returns>List of all audit trails</returns>
        </member>
        <member name="M:Application.Api.v1.Lifecycle.AuditEndpoints.GetAuditTrailById(System.Guid,Application.Services.Lifecycle.IAuditTrailService)">
            <summary>
            Get the specified audit trail
            </summary>
            <param name="id">GUID ID of the audit trail</param>
            <param name="auditService"></param>
            <returns>Detail regarding the specified audit trail</returns>
        </member>
        <member name="M:Application.Api.v1.Lifecycle.AuditEndpoints.GetAuditTrailsByChangedBy(System.Guid,Application.Services.Lifecycle.IAuditTrailService)">
            <summary>
            Get all audit trails where an entity was modified by a specific user
            </summary>
            <param name="id">GUID ID of the user modifying entities</param>
            <param name="auditService"></param>
            <returns>List of all audit trails where an entity was modified by the specified user</returns>
        </member>
        <member name="M:Application.Api.v1.Lifecycle.AuditEndpoints.GetAuditTrailsByRecordId(System.Guid,Application.Services.Lifecycle.IAuditTrailService)">
            <summary>
            Get all audit trails for a specific entity
            </summary>
            <param name="id">GUID ID of the entity that was modified</param>
            <param name="auditService"></param>
            <returns>List of all audit trails where the specified entity ID is the modified entity</returns>
        </member>
        <member name="M:Application.Api.v1.Lifecycle.AuditEndpoints.Delete(Domain.Enums.Lifecycle.CleanupTimeframe,Application.Services.Lifecycle.IAuditTrailService)">
            <summary>
            Delete audit records older than a specified threshold
            </summary>
            <param name="olderThan">
            Timeframe of records to keep, any records older than this will be deleted
            
            Options:
             - OneMonth
             - ThreeMonths
             - SixMonths
             - OneYear
             - TenYears
            </param>
            <param name="auditService"></param>
            <returns></returns>
        </member>
        <member name="M:Application.Helpers.GameServer.GameHelpers.SteamNameSanitizeRegex">
            <remarks>
            Pattern:<br/>
            <code>[^a-zA-Z0-9]\\s</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [^0-9A-Za-z].<br/>
            ○ Match a whitespace character.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Application.Helpers.Identity.PermissionHelpers.GetAllBuiltInPermissions">
            <summary>
            Returns a list of all native permissions values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Application.Helpers.Web.UrlHelpers.GenerateRandomBytes">
            <summary>
            Generate a cryptographically secure array of bytes with a fixed length
            </summary>
            <returns></returns>
        </member>
        <member name="M:Application.Helpers.Web.UrlHelpers.GenerateToken(System.Int32)">
            <summary>
            Generate a single fixed length token that can be used in a URL
            </summary>
            <param name="numberOfBytes">Desired token size in bytes, larger is more secure</param>
            <returns>A single generated URL friendly token</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Byte size can be 1 to 256</exception>
        </member>
        <member name="M:Application.Helpers.Web.UrlHelpers.GenerateTokens(System.Int32,System.Int32)">
            <summary>
            Generate a desired count of fixed length tokens that can be used in a URL
            </summary>
            <param name="tokenCount">Number of tokens to generate and return</param>
            <param name="numberOfBytes">Desired token size in bytes, larger is more secure</param>
            <returns>An enumerable of generated URL friendly tokens</returns>
        </member>
        <member name="T:Application.Models.GameServer.ConfigurationItem.ConfigurationItemHost">
            <remarks>
            MemoryPack GenerateType: Object<br/>
            <code>
            <b>System.Guid</b> Id<br/>
            <b>bool</b> DuplicateKey<br/>
            <b>string</b> Category<br/>
            <b>string</b> Key<br/>
            <b>string</b> Value<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Application.Models.GameServer.GameServer.GameServerToHost">
            <remarks>
            MemoryPack GenerateType: Object<br/>
            <code>
            <b>System.Guid</b> Id<br/>
            <b>string</b> SteamName<br/>
            <b>int</b> SteamGameId<br/>
            <b>int</b> SteamToolId<br/>
            <b>string</b> ServerName<br/>
            <b>string</b> Password<br/>
            <b>string</b> PasswordRcon<br/>
            <b>string</b> PasswordAdmin<br/>
            <b>string</b> ServerVersion<br/>
            <b>string</b> IpAddress<br/>
            <b>string</b> ExtHostname<br/>
            <b>int</b> PortGame<br/>
            <b>int</b> PortPeer<br/>
            <b>int</b> PortQuery<br/>
            <b>int</b> PortRcon<br/>
            <b>bool</b> Modded<br/>
            <b>string</b> ManualRootUrl<br/>
            <b>string</b> ServerProcessName<br/>
            <b>Domain.Enums.GameServer.ConnectivityState</b> ServerState<br/>
            <b>Domain.Enums.GameServer.GameSource</b> Source<br/>
            <b>Domain.Contracts.SerializableList&lt;Application.Models.GameServer.Mod.ModSlim&gt;</b> ModList<br/>
            <b>Domain.Contracts.SerializableList&lt;Application.Models.GameServer.LocalResource.LocalResourceHost&gt;</b> Resources<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Application.Models.GameServer.LocalResource.LocalResourceHost">
            <remarks>
            MemoryPack GenerateType: Object<br/>
            <code>
            <b>System.Guid</b> GameserverId<br/>
            <b>string</b> Name<br/>
            <b>string</b> Path<br/>
            <b>bool</b> Startup<br/>
            <b>int</b> StartupPriority<br/>
            <b>Domain.Enums.GameServer.ResourceType</b> Type<br/>
            <b>Domain.Enums.GameServer.ContentType</b> ContentType<br/>
            <b>string</b> Args<br/>
            <b>Domain.Contracts.SerializableList&lt;Application.Models.GameServer.ConfigurationItem.ConfigurationItemHost&gt;</b> ConfigSets<br/>
            <b>System.Guid</b> Id<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Application.Models.GameServer.Mod.ModHost">
            <remarks>
            MemoryPack GenerateType: Object<br/>
            <code>
            <b>int</b> GameId<br/>
            <b>int</b> ToolId<br/>
            <b>string</b> SteamId<br/>
            <b>string</b> FriendlyName<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Application.Models.GameServer.WeaverWork.GameServerStateUpdate">
            <remarks>
            MemoryPack GenerateType: Object<br/>
            <code>
            <b>System.Guid</b> Id<br/>
            <b>bool</b> BuildVersionUpdated<br/>
            <b>Domain.Enums.GameServer.ConnectivityState</b> ServerState<br/>
            <b>Domain.Contracts.SerializableList&lt;Application.Models.GameServer.LocalResource.LocalResourceSlim&gt;</b> Resources<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Application.Models.GameServer.WeaverWork.HostDetailUpdate">
            <remarks>
            MemoryPack GenerateType: Object<br/>
            <code>
            <b>System.Guid</b> HostId<br/>
            <b>string</b> Hostname<br/>
            <b>Domain.Contracts.SerializableList&lt;Domain.Models.Host.HostCpu&gt;</b> Cpus<br/>
            <b>Domain.Contracts.SerializableList&lt;Domain.Models.Host.HostMotherboard&gt;</b> Motherboards<br/>
            <b>Domain.Contracts.SerializableList&lt;Domain.Models.Host.HostStorage&gt;</b> Storage<br/>
            <b>Domain.Contracts.SerializableList&lt;Domain.Models.Host.HostNetworkInterface&gt;</b> NetworkInterfaces<br/>
            <b>Domain.Contracts.SerializableList&lt;Domain.Models.Host.HostRam&gt;</b> RamModules<br/>
            <b>Domain.Models.Host.HostOperatingSystem</b> Os<br/>
            <b>Domain.Contracts.SerializableList&lt;Domain.Models.Host.HostGpu&gt;</b> Gpus<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Application.Models.GameServer.WeaverWork.WeaverWorkClient">
            <remarks>
            MemoryPack GenerateType: Object<br/>
            <code>
            <b>int</b> Id<br/>
            <b>System.Guid?</b> GameServerId<br/>
            <b>Domain.Enums.GameServer.WeaverWorkTarget</b> TargetType<br/>
            <b>Domain.Enums.GameServer.WeaverWorkState</b> Status<br/>
            <b>byte[]</b> WorkData<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Application.Models.GameServer.WeaverWork.WeaverWorkSlim">
            <remarks>
            MemoryPack GenerateType: Object<br/>
            <code>
            <b>int</b> Id<br/>
            <b>System.Guid</b> HostId<br/>
            <b>System.Guid?</b> GameServerId<br/>
            <b>Domain.Enums.GameServer.WeaverWorkTarget</b> TargetType<br/>
            <b>Domain.Enums.GameServer.WeaverWorkState</b> Status<br/>
            <b>byte[]</b> WorkData<br/>
            <b>System.Guid</b> CreatedBy<br/>
            <b>System.DateTime</b> CreatedOn<br/>
            <b>System.Guid?</b> LastModifiedBy<br/>
            <b>System.DateTime?</b> LastModifiedOn<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Application.Models.GameServer.WeaverWork.WeaverWorkUpdate">
            <remarks>
            MemoryPack GenerateType: Object<br/>
            <code>
            <b>int</b> Id<br/>
            <b>System.Guid?</b> HostId<br/>
            <b>Domain.Enums.GameServer.WeaverWorkTarget?</b> TargetType<br/>
            <b>Domain.Enums.GameServer.WeaverWorkState?</b> Status<br/>
            <b>byte[]</b> WorkData<br/>
            <b>System.Guid?</b> CreatedBy<br/>
            <b>System.DateTime?</b> CreatedOn<br/>
            <b>System.Guid?</b> LastModifiedBy<br/>
            <b>System.DateTime?</b> LastModifiedOn<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Application.Requests.GameServer.Host.HostCheckInRequest">
            <remarks>
            MemoryPack GenerateType: Object<br/>
            <code>
            <b>System.DateTime</b> SendTimestamp<br/>
            <b>float</b> CpuUsage<br/>
            <b>float</b> RamUsage<br/>
            <b>float</b> Uptime<br/>
            <b>int</b> NetworkOutBytes<br/>
            <b>int</b> NetworkInBytes<br/>
            </code>
            </remarks>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SteamNameSanitizeRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the SteamNameSanitizeRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.SteamNameSanitizeRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SteamNameSanitizeRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SteamNameSanitizeRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SteamNameSanitizeRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SteamNameSanitizeRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SteamNameSanitizeRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SteamNameSanitizeRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SteamNameSanitizeRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfAnyWhiteSpace(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a whitespace character.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiExceptWhiteSpace">
            <summary>Supports searching for characters in or not in "\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f!\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f".</summary>
        </member>
    </members>
</doc>
