using Application.Models.GameServer.Developers;
using Application.Models.GameServer.Game;
using Application.Models.GameServer.GameGenre;
using Application.Models.GameServer.GameUpdate;
using Application.Models.GameServer.Publishers;
using Application.Requests.GameServer.Game;
using Domain.Contracts;

namespace Application.Services.GameServer;

public interface IGameService
{
    Task<IResult<IEnumerable<GameSlim>>> GetAllAsync();
    Task<PaginatedResult<IEnumerable<GameSlim>>> GetAllPaginatedAsync(int pageNumber, int pageSize);
    Task<IResult<int>> GetCountAsync();
    Task<IResult<GameSlim?>> GetByIdAsync(Guid id);
    Task<IResult<IEnumerable<GameSlim>>> GetBySteamNameAsync(string steamName);
    Task<IResult<GameSlim?>> GetByFriendlyNameAsync(string friendlyName);
    Task<IResult<GameSlim?>> GetBySteamGameIdAsync(int id);
    Task<IResult<GameSlim?>> GetBySteamToolIdAsync(int id);
    Task<IResult<Guid>> CreateAsync(GameCreate request, Guid requestUserId);
    Task<IResult> UpdateAsync(GameUpdate request, Guid requestUserId);
    Task<IResult> DeleteAsync(Guid id, Guid requestUserId);
    Task<PaginatedResult<IEnumerable<GameSlim>>> SearchAsync(string searchText);
    Task<PaginatedResult<IEnumerable<GameSlim>>> SearchPaginatedAsync(string searchText, int pageNumber, int pageSize);
    Task<IResult<IEnumerable<DeveloperSlim>>> GetAllDevelopersAsync();
    Task<PaginatedResult<IEnumerable<DeveloperSlim>>> GetAllDevelopersPaginatedAsync(int pageNumber, int pageSize);
    Task<IResult<int>> GetDevelopersCountAsync();
    Task<IResult<DeveloperSlim?>> GetDeveloperByIdAsync(Guid id);
    Task<IResult<DeveloperSlim?>> GetDeveloperByNameAsync(string name);
    Task<IResult<IEnumerable<DeveloperSlim>>> GetDevelopersByGameIdAsync(Guid id);
    Task<IResult<Guid>> CreateDeveloperAsync(DeveloperCreate request, Guid requestUserId);
    Task<IResult> DeleteDeveloperAsync(Guid id, Guid requestUserId);
    Task<IResult<IEnumerable<DeveloperSlim>>> SearchDevelopersAsync(string searchText);
    Task<PaginatedResult<IEnumerable<DeveloperSlim>>> SearchDevelopersPaginatedAsync(string searchText, int pageNumber, int pageSize);
    Task<IResult<IEnumerable<PublisherSlim>>> GetAllPublishersAsync();
    Task<PaginatedResult<IEnumerable<PublisherSlim>>> GetAllPublishersPaginatedAsync(int pageNumber, int pageSize);
    Task<IResult<int>> GetPublishersCountAsync();
    Task<IResult<PublisherSlim?>> GetPublisherByIdAsync(Guid id);
    Task<IResult<PublisherSlim?>> GetPublisherByNameAsync(string name);
    Task<IResult<IEnumerable<PublisherSlim>>> GetPublishersByGameIdAsync(Guid id);
    Task<IResult<Guid>> CreatePublisherAsync(PublisherCreate request, Guid requestUserId);
    Task<IResult> DeletePublisherAsync(Guid id, Guid requestUserId);
    Task<IResult<IEnumerable<PublisherSlim>>> SearchPublishersAsync(string searchText);
    Task<PaginatedResult<IEnumerable<PublisherSlim>>> SearchPublishersPaginatedAsync(string searchText, int pageNumber, int pageSize);
    Task<IResult<IEnumerable<GameGenreSlim>>> GetAllGameGenresAsync();
    Task<PaginatedResult<IEnumerable<GameGenreSlim>>> GetAllGameGenresPaginatedAsync(int pageNumber, int pageSize);
    Task<IResult<int>> GetGameGenresCountAsync();
    Task<IResult<GameGenreSlim?>> GetGameGenreByIdAsync(Guid id);
    Task<IResult<GameGenreSlim?>> GetGameGenreByNameAsync(string name);
    Task<IResult<IEnumerable<GameGenreSlim>>> GetGameGenresByGameIdAsync(Guid id);
    Task<IResult<Guid>> CreateGameGenreAsync(GameGenreCreate createObject, Guid requestUserId);
    Task<IResult> DeleteGameGenreAsync(Guid id, Guid requestUserId);
    Task<IResult<IEnumerable<GameGenreSlim>>> SearchGameGenresAsync(string searchText);
    Task<PaginatedResult<IEnumerable<GameGenreSlim>>> SearchGameGenresPaginatedAsync(string searchText, int pageNumber, int pageSize);
    Task<IResult<IEnumerable<GameUpdateSlim>>> GetAllGameUpdatesAsync();
    Task<PaginatedResult<IEnumerable<GameUpdateSlim>>> GetAllGameUpdatesPaginatedAsync(int pageNumber, int pageSize);
    Task<IResult<int>> GetGameUpdatesCountAsync();
    Task<IResult<GameUpdateSlim?>> GetGameUpdateByIdAsync(Guid id);
    Task<IResult<IEnumerable<GameUpdateSlim>>> GetGameUpdatesByGameId(Guid id);
    Task<IResult<Guid>> CreateGameUpdateAsync(GameUpdateCreate createObject);
    Task<IResult> DeleteGameUpdateAsync(Guid id);
    Task<IResult> DeleteGameUpdatesForGameIdAsync(Guid id);
    Task<IResult<IEnumerable<GameUpdateSlim>>> SearchGameUpdateAsync(string searchText);
    Task<PaginatedResult<IEnumerable<GameUpdateSlim>>> SearchGameUpdatePaginatedAsync(string searchText, int pageNumber, int pageSize);
}